{
    "[7:4] num_i-cache_lines Number of i-cache lines:\nb0000 = 1 i-cache line\nb0001 = 2 i-cache lines\nb0010 = 3 i-cache lines\n\u2026\nb1111 = 16 i-cache lines.": "ICACHE_LINE_NUM", 
    "Address of the Destination data for DMA channel 0": "DMA_CHAN0_DST_ADDR", 
    "Address of the source data for DMA channel 0": "DMA_CHAN0_SRC_ADDR", 
    "Controls how the DMAC responds when it detects a lock-up\ncondition:\n0 = the DMAC aborts all of the contributing DMA channels and sets\nirq_abort HIGH\n1 = the DMAC sets irq_abort HIGH.": "DMAC_LOCKUP_ACTION", 
    "DMA channel number:\nb000 = DMA channel 0\nb001 = DMA channel 1\nb010 = DMA channel 2\n\u2026\nb111 = DMA channel 7": "DMA_CHANNEL_NUM", 
    "For each beat within a burst, it programs the number of bytes that\nthe DMAC reads from the source:\nb000 = reads 1 byte per beat\nb001 = reads 2 bytes per beat\nb010 = reads 4 bytes per beat\nb011 = reads 8 bytes per beat\nb100 = reads 16 bytes per beat\nb101-b111 = reserved.\nThe total number of bytes that the DMAC reads into the MFIFO\nwhen it executes a DMALD instruction\nis the product of src_burst_len and src_burst_size": "DMAC_MFIFO_READ_ON_DMALD_BYTES", 
    "For each beat within a burst, it programs the number of bytes that\nthe DMAC writes to the destination:\nb000 = writes 1 byte per beat\nb001 = writes 2 bytes per beat\nb010 = writes 4 bytes per beat\nb011 = writes 8 bytes per beat\nb100 = writes 16 bytes per beat\nb101-b111 = reserved.\nThe total number of bytes that the DMAC writes out of the MFIFO\nwhen it executes a DMAST instruction\nis the product of dst_burst_len and dst_burst_size.": "DMAC_WRITE_PER_BEAT", 
    "For each burst, these bits program the number of data transfers\nthat the DMAC performs when it reads the source data:\nb0000 = 1 data transfer\nb0001 = 2 data transfers\nb0010 = 3 data transfers\n\u2026\nb1111 = 16 data transfers.\nThe total number of bytes that the DMAC reads into the MFIFO\nwhen it executes a DMALD instruction\nis the product of src_burst_len and src_burst_size": "DMAC_MFIFO_READ_ON_DMALD_XFERS", 
    "For each burst, these bits program the number of data transfers\nthat the DMAC performs when it writes\nthe destination data:\nb0000 = 1 data transfer\nb0001 = 2 data transfers\nb0010 = 3 data transfers\n\u2026\nb1111 = 16 data transfers.\nThe total number of bytes that the DMAC writes out of the MFIFO\nwhen it executes a DMAST instruction\nis the product of dst_burst_len and dst_burst_size": "DMAC_MFIFO_WRITE_ON_DMAST", 
    "If the DMA channel aborts, this bit indicates if the erroneous\ninstruction was read from the system\nmemory or from the debug interface:\n0 = instruction that generated an abort was read from system\nmemory\n1 = instruction that generated an abort was read from the debug\ninterface.\nThis fault is an imprecise abort but the bit is only valid when a\nprecise abort occurs.": "DMA_CHANNEL_ABORT_SRC", 
    "If the DMA channel is in the Waiting for event state or the Waiting\nfor peripheral state then these bits\nindicate the event or peripheral number that the channel is waiting\nfor:\nb00000 = DMA channel is waiting for event, or peripheral, 0\nb00001 = DMA channel is waiting for event, or peripheral, 1\nb00010 = DMA channel is waiting for event, or peripheral, 2\n\u2026\nb11111 = DMA channel is waiting for event, or peripheral, 31": "DMA_CHANNEL_WAITING_ON_EVENT", 
    "If the DMA manager aborts, this bit indicates if the erroneous\ninstruction was read from the system\nmemory or from the debug interface:\n0 = instruction that generated an abort was read from system\nmemory\n1 = instruction that generated an abort was read from the debug\ninterface.": "DMA_MANAGER_ABORT_SRC", 
    "Indicates if a DMA channel thread, in the Non-secure state,\nattempts to execute DMAWFP, DMALDP,\nDMASTP, or DMAFLUSHP with inappropriate security permissions:\n0 = a DMA channel thread in the Non-secure state is not violating\nthe security permissions\n1 = a DMA channel thread in the Non-secure state attempted to\nexecute either:\no DMAWFP to wait for a secure peripheral\no DMALDP or DMASTP to notify a secure peripheral\no DMAFLUSHP to flush a secure peripheral.\nThis fault is a precise abort.": "DMA_THREAD_VIOLATING_SECURITY_INTERRUPT", 
    "Indicates if a DMA channel thread, in the Non-secure state,\nattempts to program the CCRn Register\nto perform a secure read or secure write:\n0 = a DMA channel thread in the Non-secure state is not violating\nthe security permissions\n1 = a DMA channel thread in the Non-secure state attempted to\nperform a secure read or secure write.\nThis fault is a precise abort": "DMA_THREAD_VIOLATING_SECURITY", 
    "Indicates if the DMA channel has locked-up because of resource\nstarvation:\n0 = DMA channel has adequate resources\n1 = DMA channel has locked-up because of insufficient resources.\nThis fault is an imprecise abort": "DMA_CHANNEL_RESOURCE_STATUS", 
    "Indicates if the DMA channel thread attempts to execute DMAWFE\nor DMASEV with inappropriate security permissions:\n0 = a DMA channel thread in the Non-secure state is not violating\nthe security permissions\n1 = a DMA channel thread in the Non-secure state attempted to\nexecute either:\nDMAWFE to wait for a secure event\nDMASEV to create a secure event or secure interrupt.\nThis fault is a precise abort.": "DMA_THREAD_VIOLATING_SECURITY_DMAWFE_DMASEV", 
    "Indicates if the DMA channel thread was attempting to execute an\ninstruction operand that was not\nvalid for the configuration of the DMAC:\n0 = valid operand\n1 = invalid operand.\nThis fault is a precise abort.": "DMA_THREAD_OPERAND_VALIDITY", 
    "Indicates if the DMA channel thread was attempting to execute an\nundefined instruction:\n0 = defined instruction\n1 = undefined instruction.\nThis fault is a precise abort": "DMA_THREAD_INSTRUCTION_VALID", 
    "Indicates if the DMA manager was attempting to execute an\ninstruction operand that was not valid for\nthe configuration of the DMAC:\n0 = valid operand\n1 = invalid operand.": "DMA_MANAGER_OPERAND_VALIDITY", 
    "Indicates if the DMA manager was attempting to execute an\nundefined instruction:\n0 = defined instruction\n1 = undefined instruction.": "DMA_MANAGER_INSTRUCTION_VALIDITY", 
    "Indicates if the DMA manager was attempting to execute DMAGO\nwith inappropriate security permissions:\n0 = DMA manager has appropriate security to execute DMAGO\n1 = DMA manager thread in the Non-secure state attempted to\nexecute DMAGO to create a DMA channel operating in the Secure\nstate.": "DMA_MANAGER_SECURITY_STATUS_DMAGO", 
    "Indicates if the DMA manager was attempting to execute DMAWFE\nor DMASEV with inappropriate security permissions:\n0 = DMA manager has appropriate security to execute DMAWFE or\nDMASEV\n1 = a DMA manager thread in the Non-secure state attempted to\nexecute either:\nDMAWFE to wait for a secure event\nDMASEV to create a secure event or secure interrupt": "DMAC_SECURITY_EXCEPTION_FROM_DMAWFE_DMASEV", 
    "Indicates if the MFIFO did not contain the data to enable the DMAC\nto perform the DMAST:\n0 = MFIFO contains all the data to enable the DMAST to complete\n1 = previous DMALDs have not put enough data in the MFIFO to\nenable the DMAST to complete.\nThis fault is a precise abort.": "DMAC_MFIFO_ENOUGH_DATA", 
    "Indicates if the MFIFO prevented the DMA channel thread from\nexecuting DMALD or DMAST. Depending on the instruction:\nDMALD    0 = MFIFO contains sufficient space\n1 = MFIFO is too small to hold the data that DMALD requires.\nDMAST    0 = MFIFO contains sufficient data\n1 = MFIFO is too small to store the data to enable DMAST to\ncomplete.\nThis fault is an imprecise abort": "DMA_CHANNEL_MFIFO_ENOUGH_SPACE_DMALD", 
    "Indicates the AXI response that the DMAC receives on the BRESP\nbus, after the DMA channel\nthread performs a data write:\n0 = OKAY response\n1 = EXOKAY, SLVERR, or DECERR response.\nThis fault is an imprecise abort.": "DMA_CHANNEL_RRESP_STATUS_WRITE", 
    "Indicates the AXI response that the DMAC receives on the RRESP\nbus, after the DMA channel\nthread performs a data read:\n0 = OKAY response\n1 = EXOKAY, SLVERR, or DECERR response.\nThis fault is an imprecise abort": "DMA_CHANNEL_RRESP_STATUS", 
    "Indicates the AXI response that the DMAC receives on the RRESP\nbus, after the DMA channel\nthread performs an instruction fetch:\n0 = OKAY response\n1 = EXOKAY, SLVERR, or DECERR response.\nThis fault is a precise abort.": "DMA_CHANNEL_RRESP_STATUS_FETCH", 
    "Indicates the AXI response that the DMAC receives on the RRESP\nbus, after the DMA manager\nperforms an instruction fetch:\n0 = OKAY response\n1 = EXOKAY, SLVERR, or DECERR response": "DMAC_RRESP_STATUS", 
    "Indicates the status of the boot_from_pc signal when the DMAC\nexited from reset:\n0 = boot_from_pc was LOW\n1 = boot_from_pc was HIGH": "DMAC_BOOT_FROM_PC_STATUS", 
    "Indicates the status of the boot_manager_ns signal when the\nDMAC exited from reset:\n0 = boot_manager_ns was LOW\n1 = boot_manager_ns was HIGH.": "DMAC_BOOT_MANAGER_NS_STATUS", 
    "Instruction byte 0": "INSTRUCTION_BYTE_0", 
    "Instruction byte 1": "INSTRUCTION_BYTE_1", 
    "Instruction byte 2": "INSTRUCTION_BYTE_2", 
    "Instruction byte 3": "INSTRUCTION_BYTE_3", 
    "Instruction byte 4": "INSTRUCTION_BYTE_4", 
    "Instruction byte 5": "INSTRUCTION_BYTE_5", 
    "lane count in\nconfigure the lane count supported\n2\u2019b11: reserved\n2\u2019b10: X4\n2\u2019b01: X2\n2\u2019b00: X1": "LANE_COUNT", 
    "Loop counter 0 iterations": "LOOP_COUNTER_0", 
    "Loop counter 1 iterations": "LOOP_COUNTER_1", 
    "Number of DMA channels that the DMAC supports:\nb000 = 1 DMA channel\nb001 = 2 DMA channels\nb010 = 3 DMA channels\n\u2026\nb111 = 8 DMA channels.": "DMAC_NUM_CHANNELS", 
    "Number of interrupt outputs that the DMAC provides:\nb00000 = 1 interrupt output, irq[0]\nb00001 = 2 interrupt outputs, irq[1:0]\nb00010 = 3 interrupt outputs, irq[2:0]\n\u2026\nb11111 = 32 interrupt outputs, irq[31:0].": "DMAC_NUM_INTERRUPT_OUPUTS", 
    "Number of peripheral request interfaces that the DMAC provides:\nb00000 = 1 peripheral request interface\nb00001 = 2 peripheral request interfaces\nb00010 = 3 peripheral request interfaces\n\u2026\nb11111 = 32 peripheral request interfaces.": "DMAC_NUM_PERIPHERAL_REQ_INTERFACES", 
    "Program counter for the DMA channel 0 thread": "DMA_CHAN0_PC", 
    "Program counter for the DMA channel 1 thread": "DMA_CHAN1_PC",
    "Program counter for the DMA manager thread": "DMA_MANAGER_PC", 
    "Program the appropriate bit to control how the DMAC responds": "DMA_DMASEV_IRQ_CTRL", 
    "Programs the burst type that the DMAC performs when it reads the\nsource data:\n0 = Fixed-address burst. The DMAC signals ARBURST[0] LOW.\n1 = Incrementing-address burst. The DMAC signals ARBURST[0]\nHIGH": "DMAC_BURST_ADDRESS_TYPE_ARBURST", 
    "Programs the burst type that the DMAC performs when it writes the\ndestination data:\n0 = Fixed-address burst. The DMAC signals AWBURST[0] LOW.\n1 = Incrementing-address burst. The DMAC signals AWBURST[0]\nHIGH.": "DMAC_BURST_ADDRESS_TYPE", 
    "Programs the state of ARPROT[2:0]a when the DMAC reads the\nsource data.\nBit [10]    0 = ARPROT[2] is LOW\n1 = ARPROT[2] is HIGH.\nBit [9]    0 = ARPROT[1] is LOW\n1 = ARPROT[1] is HIGH.\nBit [8]    0 = ARPROT[0] is LOW\n1 = ARPROT[0] is HIGH.": "DMAC_ARPROTO_READ", 
    "Programs the state of AWCACHE[3,1:0]a when the DMAC writes\nthe destination data.\nBit [27]    0 = AWCACHE[3] is LOW\n1 = AWCACHE[3] is HIGH.\nBit [26]    0 = AWCACHE[1] is LOW\n1 = AWCACHE[1] is HIGH.\nBit [25]    0 = AWCACHE[0] is LOW\n1 = AWCACHE[0] is HIGH": "DMAC_AWCACHE_WRITE", 
    "Programs the state of AWPROT[2:0]a when the DMAC writes the\ndestination data.\nBit [24]    0 = AWPROT[2] is LOW\n1 = AWPROT[2] is HIGH.\nBit [23]    0 = AWPROT[1] is LOW\n1 = AWPROT[1] is HIGH.\nBit [22]    0 = AWPROT[0] is LOW\n1 = AWPROT[0] is HIGH": "DMAC_AWPROTO_WRITE", 
    "Provides the security status of the DMA manager thread:\n0 = DMA manager operates in the Secure state\n1 = DMA manager operates in the Non-secure state.": "DMA_MANAGER_SECURITY_STATE", 
    "Provides the status of the interrupts that are active in the DMAC:": "DMA_INTERRUPT_STATUS", 
    "Returns the status of the event-interrupt resources:": "DMA_EVENT_STATUS", 
    "Set the bits to control the state of ARCACHE[2:0]a when the DMAC\nreads the source data.\nBit [13]    0 = ARCACHE[2] is LOW\n1 = ARCACHE[2] is HIGH.\nBit [12]    0 = ARCACHE[1] is LOW\n1 = ARCACHE[1] is HIGH.\nBit [11]    0 = ARCACHE[0] is LOW\n1 = ARCACHE[0] is HIGH.": "DMAC_ARCACHE_READ", 
    "Supports peripheral requests:\n0 = the DMAC does not provide a peripheral request interface\n1 = the DMAC provides the number of peripheral request interfaces\nthat the num_periph_req field specifies.": "DMAC_SUPPORTS_PERIPHERAL_REQ_INTERFACE", 
    "The channel non-secure bit provides the security of the DMA\nchannel:\n0 = DMA channel operates in the Secure state\n1 = DMA channel operates in the Non-secure state": "DMA_CHANNEL_IS_SECURE", 
    "The channel status encoding is:\nb0000 = Stopped\nb0001 = Executing\nb0010 = Cache miss\nb0011 = Updating PC\nb0100 = Waiting for event\nb0101 = At barrier\nb0110 = reserved\nb0111 = Waiting for peripheral\nb1000 = Killing\nb1001 = Completing\nb1010-b1101 = reserved\nb1110 = Faulting completing\nb1111 = Faulting": "DMA_CHANNEL_STATUS", 
    "The debug encoding is as follows:\nb00 = execute the instruction that the DBGINST [1:0] Registers\ncontain\nb01 = reserved\nb10 = reserved\nb11 = reserved": "DEBUG_DBGINST2", 
    "The debug encoding is as follows:\nb00 = execute the instruction that the DBGINST [1:0] Registers\ncontain\nb01 = reserved\nb10 = reserved\nb11 = reserved.": "EXECUTE_DBGINST", 
    "The debug thread encoding is as follows:\n0 = DMA manager thread\n1 = DMA channel.": "DMA_DEBUG_THREAD_TYPE", 
    "The length of an i-cache line:\nb000-b001 = reserved\nb010 = 4 bytes\nb011 = 8 bytes\nb100 = 16 bytes\nb101 = 32 bytes\nb110-b111 = reserved": "ICACHE_LINE_SIZE", 
    "The operating state of the DMA manager:\nb0000 = Stopped\nb0001 = Executing\nb0010 = Cache miss\nb0011 = Updating PC\nb0100 = Waiting for event\nb0101-b1110 = reserved\nb1111 = Faulting.": "DMA_MANAGER_STATE", 
    "When the DMA channel thread executes DMAWFP this bit indicates\nif the burst or single operand were set:\n0 = DMAWFP executed with the single operand set\n1 = DMAWFP executed with the burst operand set.": "DMAWFP_WAS_SINGLE_OR_BURST", 
    "When the DMA channel thread executes DMAWFP this bit indicates\nif the periph operand was set:\n0 = DMAWFP executed with the periph operand not set\n1 = DMAWFP executed with the periph operand set": "DMAWFP_HAS_PERIPH", 
    "When the DMA manager thread executes a DMAWFE instruction, it\nwaits for the following event to occur:\nb00000 = event[0]\nb00001 = event[1]\nb00010 = event[2]\n\u2026\nb11111 = event[31].": "DMA_MANAGER_DMAWFE_WAIT"
}