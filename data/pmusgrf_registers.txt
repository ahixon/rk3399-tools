// see memento/src/rockchip/u-boot/arch/arm/include/asm/arch/grf_rk3399.h
// need to determine how many of these have the top 16-bits as write-enable

// PERILPM0 System Configure Signals
perilp_con0[5] default=0
	sgrf_perilp_cm0s_rsthold
	Reset hold control
		0: reset can be asserted
		1: reset cannot be asserted, so M0 RESETn will be high

perilp_con0[1] default=0
	sgrf_con_dbgen_m0_peril
	Serial Wire Debug enable
		0: disable
		1: enable

soc_con0[13] default=0
	sgrf_con_perilp_m0_jtag_rstreqn
	Always be 0

soc_con0[14] default=0
	sgrf_con_m0_perilp_sysrstreq_en
	Enable for SYSRESETREQ

soc_con6[13] default=1
	sgrf_con_perim0_secure_ctrl
	Master security attribute
		0: secure
		1: non-secure

perilp_con2[9] default=0
	grf_con_m0_perilp_stcalib_noref
	Indicates that no alternative reference clock source has been integrated. Tie HIGH if STCLKEN has been tied off.

perilp_con2[8] default=0
	grf_con_m0_perilp_stcalib_skew
	Tie this LOW if the system timer clock, the external reference clock, or SCLK as indicated by STCALIB[25] (grf_con_m0_perilp_stcalib_noref), can guarantee an exact multiple of 10ms. Otherwise, tie this signal HIGH.

perilp_con2[7:0] default=0
	grf_con_m0_perilp_stcalib_tenms_23_16
	High 8 bits of TENMS. Provides an integer value to compute a 10ms (100Hz) delay from either the reference clock, or SCLK if the reference clock is not implemented.

	See also: grf_con_m0_perilp_stcalib_tenms_15_0

perilp_con1[15:0] default=0
	grf_con_m0_perilp_stcalib_tenms_15_0
	Low 16 bits of TENMS. Provides an integer value to compute a 10ms (100Hz) delay from either the reference clock, or SCLK if the reference clock is not implemented.

	See also: grf_con_m0_perilp_stcalib_tenms_23_16

perilp_con8[7:0] default=0
	grf_con_m0_perilp_irqlatency
	Minimum number of cycles between an interrupt that becomes pended in the NVIC, and the vector fetch for that interrupt being issued

perilp_con0[0] default=0
	sgrf_con_nmi_m0_perilp
	Non maskable interrupt

perilp_con0[2] default=0
	sgrf_con_dbgrestart_m0_perilp
	External restart request

perilp_con0[3] default=0
	sgrf_con_edbgrq_m0_perilp
	External debug request

perilp_con0[4] default=0
	sgrf_con_rxev_m0_perilp
	A HIGH level on this input causes the architecture defined Event Register to be set in the Cortex-M0 processor. This causes a WFE instruction to complete. It also awakens the processor if it is sleeping as the result of encountering a WFE instruction when the Event Register is clear.

// PERILPM0 System Status Signals
// are all in GRF_SOC_STATUS2

// PMUM0 System Configure Signals

pmu_con2[9] default=0
	sgrf_con_m0_stcalib_noref
	Indicates that no alternative reference clock source has been integrated. Tie HIGH if STCLKEN has been tied off.

pmu_con2[8] default=0
	sgrf_con_m0_stcalib_skew
	Tie this LOW if the system timer clock, the external reference clock, or SCLK as indicated by STCALIB[25] (sgrf_con_m0_stcalib_noref), can guarantee an exact multiple of 10ms. Otherwise, tie this signal HIGH.

pmu_con2[7:0] default=0
	sgrf_con_m0_stcalib_tenms_23_16
	High 8 bits of TENMS. Provides an integer value to compute a 10ms (100Hz) delay from either the reference clock, or SCLK if the reference clock is not implemented.

	See also: sgrf_con_m0_stcalib_tenms_15_0

pmu_con1[15:0] default=0
	sgrf_con_m0_stcalib_tenms_15_0
	Low 16 bits of TENMS. Provides an integer value to compute a 10ms (100Hz) delay from either the reference clock, or SCLK if the reference clock is not implemented.

	See also: sgrf_con_m0_stcalib_tenms_23_16

pmu_con8[7:0] default=0
	sgrf_con_irqlatency_m0
	Minimum number of cycles between an interrupt that becomes pended in the NVIC, and the vector fetch for that interrupt being issued

pmu_con0[0] default=0
	sgrf_pmu_cm0_nmi
	Non maskable interrupt

pmu_con0[1] default=0
	sgrf_pmu_enable
	Internal PMU enable
		0: disable
		1: enable

pmu_con0[2] default=0
	sgrf_mcu_dbgrestart
	External restart request

pmu_con0[3] default=0
	sgrf_mcu_edbgrq
	External debug request

pmu_con0[4] default=0
	sgrf_mcu_rxev
	A HIGH level on this input causes the architecture defined Event Register to be set in the Cortex-M0 processor. This causes a WFE instruction to complete. It also awakens the processor if it is sleeping as the result of encountering a WFE instruction when the Event Register is clear.

pmu_con0[5] default=0
	sgrf_mcu_dbgen
	Serial Wire Debug enable
		0: disable
		1: enable

pmu_con0[6] default=0
	sgrf_pmu_cm0s_rsthold
	Reset hold control
		0: reset can be asserted
		1: reset cannot be asserted, so M0 RESETn will be high

pmu_con0[7] default=1
	sgrf_pmu_cm0_mst_ctrl
	Master security attribute
		0: secure
		1: no-secure

// PMUM0 System Status Signals
// are all in PMUGRF_SOC_STATUS0

soc_con0[3]
	ca53_jtag_0
	CA53 JTAG

soc_con0[4]
	ca53_jtag_1
	CA53 JTAG

soc_con0[5]
	ca53_jtag_2
	CA53 JTAG

soc_con0[6]
	ca53_jtag_3
	CA53 JTAG

pmu_con0[15] default=0
	bootrom_remap
	Remaps 0xFFFF0000 to BOOTROM or INTMEM0. From page 29. **NOTE**: might be bootrom_remap_shadow instead.
		0: 0xFFFF0000 maps to BOOTROM.
		1: 0xFFFF0000 maps to INTMEM0.

pmu_con0[31:16] w
	write_mask

pmu_con3[31:16] w
	write_mask

pmu_con7[31:16] w
	write_mask

// guessing these, but likely
pmu_con4[31:16] w
	write_mask

pmu_con5[31:16] w
	write_mask

pmu_con6[31:16] w
	write_mask

pmu_con2[31:16] w
	write_mask

pmu_con1[31:16] w
	write_mask

pmu_con8[31:16] w
	write_mask

perilp_con2[31:16] w
	write_mask

perilp_con3[31:16] w
	write_mask

perilp_con0[31:16] w
	write_mask

perilp_con1[31:16] w
	write_mask

perilp_con6[31:16] w
	write_mask

perilp_con7[31:16] w
	write_mask

perilp_con4[31:16] w
	write_mask

perilp_con5[31:16] w
	write_mask


soc_con3[7] default=0
	bootrom_remap_shadow
	Remaps 0xFFFF0000 to BOOTROM or INTMEM0. From page 892. **NOTE**: might be bootrom_remap instead.
		0: 0xFFFF0000 maps to BOOTROM.
		1: 0xFFFF0000 maps to INTMEM0.

soc_con1[31:16] reset=0 w
	boot_address_writemask
	Write 1 for each bit to enable write to take place.
	
soc_con1[15:0] reset=0
	boot_address
	Warm boot address for CPU. Could be DMAC0 BOOT ADDR

// soc_con2[31:16] reset=0
// 	dmac1_boot_addr
// 	Configures the address location that contains the first instruction the DMAC executes, when it exits from reset. Seen as CPU_BOOT_ADDR (cluster 2?)

// These are mainly from some other RK model
// dmac_con3[31:16] offset=0x100+(4*3) default=0xffff
// 	dmac0_irq_boot_ns
// 	Controls the security state of an event-interrupt resource, when the DMAC exits from reset.
// 
// 	When the bit x is low, the DMAC assigns event<x> or irq[x] to the Secure state. Conversely, when the bit x is high, the DMAC assigns it to the non-secure state.
// 
// 	**NOTE**: probably DMAC0, but may be incorrect.
// 
// dmac_con3[15:0] offset=0x100+(4*3) default=0xffff
// 	dmac1_irq_boot_ns
// 	Controls the security state of an event-interrupt resource, when the DMAC exits from reset.
// 
// 	When the bit x is low, the DMAC assigns event<x> or irq[x] to the Secure state. Conversely, when the bit x is high, the DMAC assigns it to the non-secure state.
// 
// 	**NOTE**: probably DMAC1, but may be incorrect.
// 
// dmac_con4[31:0] reset=0xfff
// 	dmac0_boot_periph_ns
// 
// 	Channels 15-0.
// 
// dmac_con5[31:0] reset=0xfffff
// 	dmac0_boot_periph_ns
// 
// 	Channels 19-16.

// Code seems to have con5 for both periph_ns
// AND BOOT_NS (see)

soc_con3[2]
	sram1_secure
	pmusram (SRAM1) secure

soc_con3[6]
	stimer_secure
	stimer secure

soc_con3[8]
	ca53_wdt_pclk
	ca53 wdt pclk
		0: enable
		1: disable

soc_con3[10]
	cm0_wdt_pclk
	cm0 wdt pclk
		0: enable
		1: disable

soc_con4[9:0]
	tzma_size
	Controls the region considered secure by the TZMA (TrustZone Memory Adapter). See p990 of the TRM Part 1. Secure region size is set in 4KB increments, from 0KB to 192KB.

soc_con5[31:16] w
	write_enable
	Write 1 to enable writing to bit in lower 16 bits.

soc_con5[15:0]
	master_security_0

soc_con6[31:16] w
	write_enable
	Write 1 to enable writing to bit in lower 16 bits.

soc_con6[15:0]
	master_security_1

soc_con7[31:16] w
	write_enable
	Write 1 to enable writing to bit in lower 16 bits.

soc_con7[15:0]
	master_security_2

perilp_con3[15:0] default=0
	perilp_remap_flash_rom_mid
	middle 16 bits of 0x00000000-0x1FFFFFFF remap

perilp_con4[15:0] default=0
	perilp_remap_on_chip_ram_mid
	middle 16 bits of 0x20000000-0x3FFFFFFF remap

perilp_con5[15:0] default=0
	perilp_remap_off_chip_ram_mid
	Middle 16 bits of 0x60000000-0x7FFFFFFF and 0x80000000-0x9FFFFFFF memory regions.

perilp_con6[15:0] default=0
	perilp_remap_peripherals_mid
	middle 16 bits of 0xA0000000-0xDFFFFFFF remap.

perilp_con7[3:0] default=0
	perilp_remap_flash_rom_high
	top 4 bits of 0x00000000-0x1FFFFFFF remap

perilp_con7[7:4] default=0
	perilp_remap_on_chip_ram_high
	top 4 bits of 0x20000000-0x3FFFFFFF remap

perilp_con7[11:8] default=0
	perilp_remap_off_chip_ram_high
	Top 4 bits of 0x60000000-0x7FFFFFFF and 0x80000000-0x9FFFFFFF memory regions.

perilp_con7[15:12] default=0
	perilp_remap_peripherals_high
	top 4 bits of 0xA0000000-0xDFFFFFFF remap

pmu_con3[15:0] default=0
	pmu_remap_flash_rom_mid
	middle 16 bits of 0x00000000-0x1FFFFFFF remap

pmu_con4[15:0] default=0
	pmu_remap_on_chip_ram_mid
	middle 16 bits of 0x20000000-0x3FFFFFFF remap

pmu_con5[15:0] default=0
	pmu_remap_off_chip_ram_mid
	Middle 16 bits of 0x60000000-0x7FFFFFFF and 0x80000000-0x9FFFFFFF memory regions.

pmu_con6[15:0] default=0
	pmu_remap_peripherals_mid
	middle 16 bits of 0xA0000000-0xDFFFFFFF remap

pmu_con7[3:0] default=0
	pmu_remap_flash_rom_high
	top 4 bits of 0x00000000-0x1FFFFFFF remap

pmu_con7[7:4] default=0
	pmu_remap_on_chip_ram_high
	top 4 bits of 0x20000000-0x3FFFFFFF remap

pmu_con7[11:8] default=0
	pmu_remap_off_chip_ram_high
	Top 4 bits of 0x60000000-0x7FFFFFFF and 0x80000000-0x9FFFFFFF memory regions.

pmu_con7[15:12] default=0
	pmu_remap_peripherals_high
	top 4 bits of 0xA0000000-0xDFFFFFFF remap


// dmac0 security
// 0=secure, 1=non-secure
// top 16 bits are write enable bits, bottom are ???
soc_con8[15:0] default=0xfff9
	dmac0_periph_ns_0
	0 indicates secure, 1 indicates non-secure.
	CFG_NS

soc_con8[31:16] w
	write_enable

soc_con9[15:0] default=0xfff
	dmac0_boot_periph_ns
	0 indicates secure, 1 indicates non-secure.

soc_con9[31:16] w
	write_enable

soc_con10[15:0] default=0x0
	dmac0_boot_addr
	0 indicates secure, 1 indicates non-secure.

soc_con10[31:16] w
	write_enable

// dmac1 security
soc_con11[15:0] default=0x9
	dmac1_periph_ns_0
	0 indicates secure, 1 indicates non-secure.
	(CFG)

soc_con11[31:16] w
	write_enable

soc_con12[15:0] default=0xfff
	dmac1_boot_periph_ns_low
	0 indicates secure, 1 indicates non-secure.

soc_con12[31:16] w
	write_enable

soc_con13[15:0] default=0x0
	dmac1_boot_addr
	0 indicates secure, 1 indicates non-secure.

soc_con13[31:16] w
	write_enable

soc_con14[15:0] default=0xff
	dmac1_boot_periph_ns_high
	0 indicates secure, 1 indicates non-secure.

soc_con14[31:16] w
	write_enable

soc_con15[15:0] default=0xffff
	dmac1_boot_irq_ns
	0 indicates secure, 1 indicates non-secure.

soc_con15[31:16] w
	write_enable

// (need to soft-reset DMAC by writing to CRU_SOFTRST_CON10 if you change these)

// note that these are opposite to PERIPH_NS
ddr_rgn_con22[15:8] default=0xff
	dmac1_rgn_s
	1 indicates secure, 0 indicates non-secure.

ddr_rgn_con22[7:0] default=0xff
	dmac0_rgn_s
	1 indicates secure, 0 indicates non-secure.

ddr_rgn_con22[31:16] w
	write_enable


// # HDCP
// ## PDFK
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(24), 0xFFFFeeff);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(25), 0xFFFFccdd);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(26), 0xFFFFaabb);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(27), 0xFFFF8899);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(28), 0xFFFF6677);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(29), 0xFFFF4455);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(30), 0xFFFF2233);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(31), 0xFFFF0011);
// ## DUK
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(32), 0xFFFF1100);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(33), 0xFFFF3322);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(34), 0xFFFF5544);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(35), 0xFFFF7766);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(36), 0xFFFF9988);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(37), 0xFFFFbbaa);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(38), 0xFFFFddcc);
// +	mmio_write_32(SGRF_BASE + SGRF_SOC_CON(39), 0xFFFFeeff);